<?php
namespace APP\Controller;
// use APP\Controller\WinxinsqController;
class OrderController extends BaseController {
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $cookie_member = $_COOKIE["member_id"];
        if(empty($cookie_member))
        {
            $result = array("code"=>"404","msg"=>"您尚未登陆或登陆已过期");
            exit(json_encode($result,JSON_UNESCAPED_UNICODE));
        }
    }
    /**
    * @api {POST} Order/sure_order  确认订单
    * @apiGroup 订单
    * @apiDescription 确认订单
    * @apiParam {int} member_id 会员标识
    * @apiParam {object} order_product 订单信息。例：[{"id":"5","spec":{"颜色":"绿色","大小":"43"},"count":"20"}]
    * @apiSuccess (成功) {int} code 状态码
    * @apiSuccess (成功) {String} msg 说明
    * @apiSuccess (成功) {object} data 信息
    * @apiSuccess (成功) {int} data.total 总价
    * @apiSuccess (成功) {object} data.address 默认地址
    * @apiSuccess (成功) {string} data。address.id 地址标识
    * @apiSuccess (成功) {string} data。address.name 收件人
    * @apiSuccess (成功) {string} data。address.phone 联系电话
    * @apiSuccess (成功) {string} data。address.province 省
    * @apiSuccess (成功) {string} data。address.city 市
    * @apiSuccess (成功) {string} data。address.district 区
    * @apiSuccess (成功) {string} data。address.address 地址
    * @apiSuccess (成功) {object} data.product 产品
    * @apiSuccess (成功) {string} data.product.id 产品标识
    * @apiSuccess (成功) {string} data.product.title 产品名称
    * @apiSuccess (成功) {string} data.product.picture 产品图
    * @apiSuccess (成功) {string} data.product.reserve 库存
    * @apiSuccess (成功) {string} data.product.original_price 原价
    * @apiSuccess (成功) {string} data.product.current_price 现价
    * @apiSuccess (成功) {string} data.product.count 数量
    * @apiSuccess (成功) {string} data.product.subtotal 小计
    * @apiSuccess (成功) {object} data.product.spec 规格.例：{"颜色":"绿色","大小":"43"}
    * @apiSuccessExample {json} 成功返回
    *   {
    *       "code": 200,
    *       "msg": "xxx",
    *       "data": {
    *           "total":"2500",
                "address":{
                    "id":"15",
        *           "name":"嫦娥",
        *           "phone":"13888888888",
        *           "province":"银河系",
        *           "city":"太阳系",
        *           "district":"月球",
        *           "address":"广寒宫"
                },
                "product":[{
                    "id":"15",
        *           "title":"板砖",
        *           "picture":"2.png",
        *           "original_price":"500",
        *           "current_price":"40",
        *           "count":"5",
        *           "subtotal":"2000",
        *           "spec":{"颜色":"绿色","大小":"43"}
                }]
    *       }
    *   }
    * @apiError (失败) {int} code 状态吗
    * @apiError (失败) {String} msg 信息
    * @apiErrorExample {json} 失败返回
    *   {
    *       "code": 500
    *       "msg": "xxx"
    *   }
    */
    public function sure_order(){
        $member_id = $_POST['member_id'];
        $member = M('member')->field("id,type,integral")->where("id=$member_id")->find();
        if(empty($member))
        {
            $result = array("code"=>"500","msg"=>"会员不存在");
            exit(json_encode($result,JSON_UNESCAPED_UNICODE));
        }
        $order_product = $_POST['order_product'];

        $order_products = json_decode($order_product,ture);

        $total_yuan = 0;
        $total_jifen = 0;
        $new_product = array();

        $store_array= [];
        array_walk($order_products, function($value, $key) use (&$store_array){
            $store_array[] = $value['store_id'];
        });
        $store_array = array_unique($store_array);

        $shops = array();
        foreach ($store_array as $store_key => $store_value) {
            $store = M('store')->where("id=$store_value")->find();
            if(!empty($store))
            {
                $row = array("store_name"=>$store['name'],"store_id"=>$store['id']);
                $shop_product = array();
                $xiaoji_yuan = 0;
                $xiaoji_jifen = 0;
                $xiaoji_num = 0;
                foreach ($order_products as $key => $value) {
                    if($value['store_id']==$store_value)
                    {
                        // print_r($value['id']);
                        $product_id = $value['id'];
                        $product_spec = $value['spec'];

                        $count = $value['count'];
                        $product = M('product')->where("id=$product_id")->find();

                        $price = getPrice($product_id,$product_spec,$member['type']);

                        if($price['status']=="ok")
                        {
                            $current_price = $price['current_price'];
                            $original_price = $price['original_price'];
                            $reserve = $price['reserve'];
                        }
                        else
                        {
                            $result = array("code"=>"500","msg"=>"获取价格失败");
                            exit(json_encode($result,JSON_UNESCAPED_UNICODE));
                        }
                        // print_r($current_price);

                        $price_type = explode("+",$current_price);
                        $price_yuan = $price_type[0];
                        $price_jifen = $price_type[1];
                        $xiaoji_yuan += $price_yuan * $count;
                        $xiaoji_jifen += $price_jifen * $count;
                        $xiaoji_num += $count;
                        
                        $new_product['id'] = $product_id;
                        $new_product['title'] = $product['title'];
                        $new_product['picture'] = $product['picture'];
                        $new_product['reserve'] = $product['reserve'];
                        $new_product['count'] = $count;
                        if(count($product_spec)<=0)
                        {
                            $product_spec = (object)null;
                        }
                        $new_product['spec'] = $product_spec;
                        $new_product['yuan'] = $price_yuan;
                        $new_product['jifen'] = $price_jifen;

                        array_push($shop_product, $new_product);

                        // $total_yuan += $xiaoji_yuan;
                        // $total_jifen += $xiaoji_jifen;
                    }
                }
                // print_r($shop_product);

                if($xiaoji_yuan>=$store['mianyou'])
                {
                    $yunfei = 0;
                }
                else
                {
                    $yunfei = $store['yunfei'];
                }

                $xiaoji_yuan += $yunfei;

                $row['xiaoji_num'] = $xiaoji_num;
                $row['xiaoji_yuan'] = $xiaoji_yuan;
                $row['xiaoji_jifen'] = $xiaoji_jifen;
                $row['shop_yunfei'] = $store['yunfei'];
                $row['yunfei'] = $yunfei;
                $row['mianyou'] = $store['mianyou'];

                $row['rows'] = $shop_product;

                array_push($shops, $row);

                $total_yuan += $xiaoji_yuan;
                $total_jifen += $xiaoji_jifen;
            }
        }
        

        //默认地址
        $DefaultAddress = M("shopping_address")->where("member_id=$member_id")->order("is_default desc")->find();
        $sure_order = array("total_yuan"=>$total_yuan,"total_jifen"=>$total_jifen,"address"=>$DefaultAddress,"shops"=>$shops,"member"=>$member);

        $result = array("code"=>"200","msg"=>"成功","data"=>$sure_order);
        exit(json_encode($result,JSON_UNESCAPED_UNICODE));
    }
    /**
    * @api {GET} Order/getData  订单列表
    * @apiGroup 订单
    * @apiDescription 订单列表
    * @apiParam {int} member_id 会员标识
    * @apiParam {int} CurrentPage 当前页
    * @apiParam {int} paginalNum 一页显示数量
    * @apiParam {int} status 订单状态。 ""(全部)/0(待付款)/1(待发货)/2(待收货)/3(待评价)
    * @apiSuccess (成功) {int} code 状态码
    * @apiSuccess (成功) {String} msg 说明
    * @apiSuccess (成功) {object} data 信息
    * @apiSuccess (成功) {int} data.id 地址标识
    * @apiSuccess (成功) {string} data.shop  卖家名称
    * @apiSuccess (成功) {string} data.ordernum  订单号
    * @apiSuccess (成功) {string} data.order_status  订单状态
    * @apiSuccess (成功) {string} data.payment_price 订单总价
    * @apiSuccess (成功) {object} data.product 订单产品
    * @apiSuccess (成功) {string} data.product.id 产品标识
    * @apiSuccess (成功) {string} data.product.title 产品名称
    * @apiSuccess (成功) {string} data.product.picture 产品缩略图
    * @apiSuccess (成功) {string} data.product.spec 产品规格。{"颜色":"绿色"},{"大小":"43"}
    * @apiSuccess (成功) {string} data.product.current_price 产品价格
    * @apiSuccess (成功) {string} data.product.number 产品数量
    * @apiSuccess (成功) {string} data.product.is_ship 是否发货 0(否)/1(是)
    * @apiSuccess (成功) {string} data.product.is_recipient 是否收货 0(否)/1(是)
    * @apiSuccess (成功) {string} data.product.is_comment 是否评论 0(否)/1(是)
    * @apiSuccessExample {json} 成功返回 
    *   {
    *       "code": 200,
    *       "msg": "xxx",
    *       "data": [{
    *           "id":"15",
    *           "shop":"佳源建材",
    *           "order_status":"1",
    *           "payment_price":"2000",
    *           "product":{
                    "id":"12",
                    "title":"砖",
                    "picture":"1.png",
                    "spec":{"颜色":"绿色"},{"大小":"43"},
                    "current_price":"500",
                    "number":"4",
                    "is_ship":"1",
                    "is_recipient":"1",
                    "is_comment":"1",
                }
    *       }]
    *   }
    */
    public function getData(){
        $status = $_GET['status'];
        $CurrentPage = $_GET['CurrentPage'];
        $paginalNum = $_GET['paginalNum'];
        $member_id = $_GET['member_id'];
        
        if($CurrentPage==null||$CurrentPage<=0)
        {
            $CurrentPage = 1;
        }
        if($paginalNum==null||$paginalNum<=0)
        {
            $paginalNum = 10;
        }

        $table = "order_form";
        $order = "id desc";
        $where['b.member_id'] = $member_id;
        $where['a.is_recycle'] = 0;
        if(isset($status))
        {
            $where['a.order_status'] = $status;
        }

        $shops = array();
        $order_store = M('order_store a')
            ->field("a.id,a.store_id,a.order_id,a.store_name,a.order_status,a.payment_price,a.integral")
            ->join("order_form b on a.order_id=b.id")
            ->where($where)
            ->select();

        foreach ($order_store as $store_key => $store_value) {
            $store = M('store')->where("id={$store_value['store_id']}")->find();
            if(!empty($store))
            {
                $product = M('order_product a')
                    ->field("a.id,a.product_name title,a.product_picture picture,a.product_spec  spec,a.is_ship,a.is_comment,a.is_recipient,a.product_num number,a.product_current_price current_price")
                    ->where("order_store={$store_value['id']}")
                    ->order('a.id desc')
                    ->select();


                $number = [];
                array_walk($product, function($value, $key) use (&$number){
                    $number[] = $value['number'];
                });
                $xiaoji_num = array_sum($number);

                $order_store[$store_key]['xiaoji_num'] = $xiaoji_num;
                $order_store[$store_key]['product'] = $product;

                array_push($shops,$order_store[$store_key]);
            }
        }
        // print_r($shops);
        $result = array("code"=>"200","msg"=>"获取订单成功","data"=>$shops);
        exit(json_encode($result,JSON_UNESCAPED_UNICODE));
    }

    /**
    * @api {POST} Order/add  新增订单
    * @apiGroup 订单
    * @apiDescription 新增订单
    * @apiParam {int} address_id 地址标识
    * @apiParam {String} order_product 产品信息。例：[{"id":"5","spec":{"颜色":"绿色","大小":"43"},"count":"20"}]
    * @apiParam {int} message 备注留言
    * @apiParam {int} member_id 当前会员
    * @apiSuccess (成功) {int} code 状态码
    * @apiSuccess (成功) {String} msg 信息
    * @apiSuccess (成功) {object} data 数据
    * @apiSuccessExample {json} 成功返回
    *   {
    *       "code": 200,
    *       "msg": "添加成功"
            "data": {
                "order_id": "5",
                "ordernum": "20180901213598"
            }
    *   }
    *
    */
    
    public function add(){
        $member_id = $_POST['member_id'];
        $member = M('member')->field("id,type,integral")->where("id=$member_id")->find();
        if(empty($member))
        {
            $result = array("code"=>"500","msg"=>"会员不存在");
            exit(json_encode($result,JSON_UNESCAPED_UNICODE));
        }
        $order_product = $_POST['order_product'];
        $address_id = $_POST['address_id'];
        if(empty($order_product))
        {
            $result = array("code"=>"404","msg"=>"参数不对");
            exit(json_encode($result,JSON_UNESCAPED_UNICODE));
        }
        if(empty($address_id))
        {
            $result = array("code"=>"501","msg"=>"请选择收货地址");
            exit(json_encode($result,JSON_UNESCAPED_UNICODE));
        }
        //收货地址
        $address = M('shopping_address')->where("id=$address_id and member_id=$member_id")->find();

        $order_products = json_decode($order_product,ture);

        $total_yuan = 0;
        $total_jifen = 0;
        $new_product = array();

        //订单号及当前时间
        $ordernum=date("Ymd",time()).rand(100000,999999);
        $time=date("Y-m-d H:i:s",time());

        //订单商品表及订单表生成数据
        $order_result="true";
        $order = M();
        $order->startTrans();

        $order_add = M("order_form")
            ->data(array(
                'member_id'=>$member_id,
                "ordernum"=>$ordernum,
                "remark"=>"",
                "province"=>$address['province'],
                "city"=>$address['city'],
                "district"=>$address['district'],
                "address"=>$address['address'],
                "consignee"=>$address['name'],
                "phone"=>$address['phone']
            ))
            ->add();
        if (!$order_add>0) {
            $order->rollback();
            $result = array("code"=>"500","msg"=>"添加订单失败");
            exit(json_encode($result,JSON_UNESCAPED_UNICODE));
        }

        $store_array= [];
        array_walk($order_products, function($value, $key) use (&$store_array){
            $store_array[] = $value['store_id'];
        });
        $store_array = array_unique($store_array);
        // print_r($store_array);

        $shops = array();
        foreach ($store_array as $store_key => $store_value) {
            $store = M('store')->where("id=$store_value")->find();
            // print_r($store);
            if(!empty($store))
            {
                //添加店铺订单
                $store_add = M('order_store')
                    ->data(array(
                        'order_id'=>$order_add,
                        "store_id"=>$store['id'],
                        "store_name"=>$store['name'],
                        "remark"=>"",
                        "province"=>$address['province'],
                        "city"=>$address['city'],
                        "district"=>$address['district'],
                        "address"=>$address['address'],
                        "consignee"=>$address['name'],
                        "phone"=>$address['phone']
                    ))
                    ->add();
                if(empty($store_add))
                {
                    $order->rollback();
                    $result = array("code"=>"500","msg"=>"添加店铺订单失败");
                    exit(json_encode($result,JSON_UNESCAPED_UNICODE));
                }
                $row = array("store_name"=>$store['name'],"store_id"=>$store['id']);
                $shop_product = array();
                $xiaoji_yuan = 0;
                $xiaoji_jifen = 0;
                foreach ($order_products as $key => $value) {
                    // print_r($value);
                    if($value['store_id']==$store_value)
                    {
                        // print_r($value['id']);
                        $product_id = $value['id'];
                        $product_spec = $value['spec'];
                        
                        $count = $value['count'];
                        $product = M('product')->where("id=$product_id")->find();

                        $price = getPrice($product_id,$product_spec,$member['type']);

                        if($price['status']=="ok")
                        {
                            $current_price = $price['current_price'];
                            $original_price = $price['original_price'];
                            $reserve = $price['reserve'];
                        }
                        else
                        {
                            $result = array("code"=>"500","msg"=>"获取价格失败");
                            exit(json_encode($result,JSON_UNESCAPED_UNICODE));
                        }
                        // print_r($current_price);

                        $price_type = explode("+",$current_price);
                        $price_yuan = $price_type[0];
                        $price_jifen = $price_type[1];
                        $xiaoji_yuan += $price_yuan * $count;
                        $xiaoji_jifen += $price_jifen * $count;
                        
                        $new_product['id'] = $product_id;
                        $new_product['title'] = $product['title'];
                        $new_product['picture'] = $product['picture'];
                        $new_product['reserve'] = $product['reserve'];
                        $new_product['count'] = $count;
                        if(count($product_spec)<=0)
                        {
                            $product_spec = (object)null;
                        }
                        $new_product['spec'] = $product_spec;
                        $new_product['yuan'] = $price_yuan;
                        $new_product['jifen'] = $price_jifen;

                        array_push($shop_product, $new_product);

                        //添加订单产品
                        $goods_add = M("order_product")
                            ->data(array(
                                "order_store"=>$store_add,
                                "product_id"=>$product_id,
                                "product_name"=>$product['title'],
                                "product_picture"=>$product['picture'],
                                "product_original_price"=>$original_price,
                                "product_current_price"=>$current_price,
                                "product_spec"=>json_encode($product_spec,JSON_UNESCAPED_UNICODE),
                                "product_num"=>$count
                            ))
                            ->add();
                        if(!$goods_add>0)
                        {
                            $order_result = false;
                        }
                    }
                }
                // print_r($shop_product);

                if($xiaoji_yuan>=$store['mianyou'])
                {
                    $yunfei = 0;
                }
                else
                {
                    $yunfei = $store['yunfei'];
                }

                $xiaoji_yuan += $yunfei;

                $row['xiaoji_yuan'] = $xiaoji_yuan;
                $row['xiaoji_jifen'] = $xiaoji_jifen;
                $row['yunfei'] = $yunfei;
                $row['mianyou'] = $store['mianyou'];

                $edit_order = M('order_store')
                    ->where("id=$store_add")
                    ->data(array("integral"=>$xiaoji_jifen,"total_price"=>$xiaoji_yuan,"payment_price"=>$xiaoji_yuan))
                    ->save();
                if($edit_order===false)
                {
                    $order->rollback();
                    $result = array("code"=>"500","msg"=>"修改店铺订单失败");
                    exit(json_encode($result,JSON_UNESCAPED_UNICODE));
                }

                $row['rows'] = $shop_product;

                array_push($shops, $row);

                $total_yuan += $xiaoji_yuan;
                $total_jifen += $xiaoji_jifen;
            }
        }
        // print_r($total_jifen);
        // print_r("____");
        // print_r($total_yuan);
        //会员积分是否足够
        if($member['integral']<$total_jifen)
        {
            $order->rollback();
            $result = array("code"=>"500","msg"=>"积分不足，请充值");
            exit(json_encode($result,JSON_UNESCAPED_UNICODE));
        }
        
        $edit_order = M('order_form')
            ->where("id=$order_add")
            ->data(array("integral"=>$total_jifen,"total_price"=>$total_yuan,"payment_price"=>$total_yuan))
            ->save();
        // print_r($order_result);
        // print_r($total_yuan);
        

        if ($order_result == true && $edit_order!==false) {
            $order->commit();
            $data = array("order_id"=>$order_add,"ordernum"=>$ordernum);
            $result = array("code"=>"200","msg"=>"下订单成功","data"=>$data);
            exit(json_encode($result,JSON_UNESCAPED_UNICODE));
        }
        else {
            $order->rollback();
            $result = array("code"=>"500","msg"=>"下订单失败，请重新下单");
            exit(json_encode($result,JSON_UNESCAPED_UNICODE));
        }
    }
    /**
    * @api {POST} Order/delete  取消订单
    * @apiGroup 订单
    * @apiDescription 取消订单
    * @apiParam {int} id 订单标识
    * @apiParam {int} member_id 会员标识
    * @apiSuccess (成功) {int} code 状态码
    * @apiSuccess (成功) {String} msg 信息
    *   {
    *       "code": 200,
    *       "msg": "操作成功"
    *   }
    *
    */
    public function delete(){
        $member_id = $_POST['member_id'];
        $id = $_POST['id'];
        if(!empty($id))
        {
            $result = M('order_form')->where("id=$id and member_id=$member_id")->setField('is_recycle',1);
            if($result!==false||$result!==0)
            {
                $result = array("code"=>"200","msg"=>"取消订单成功");
            }
            else
            {
                $result = array("code"=>"500","msg"=>"取消失败，请重新操作");
            }
        }
        else
        {
            $result = array("code"=>"404","msg"=>"请选择要取消的订单");
        }
        exit(json_encode($result,JSON_UNESCAPED_UNICODE));
    }
    /**
    * @api {GET} Order/OrderInfo  订单详情
    * @apiGroup 订单
    * @apiDescription 订单详情
    * @apiParam {int} id 订单标识
    * @apiParam {int} member_id 会员标识
    * @apiSuccess (成功) {int} code 状态码
    * @apiSuccess (成功) {String} msg 信息
    * @apiSuccessExample {json} 成功返回
    *   {
    *       "code": 200,
    *       "msg": "添加成功"
    *   }
    *
    */
    public function OrderInfo(){
        $id = $_GET['id'];
        $member_id = $_GET['member_id'];
        $order = M('order_form')->where("id=$id and member_id=$member_id")->find();
        if(!empty($order))
        {
            $order_product = M('order_product')->where("order_id=$id")->select();
            if(empty($order_product))
            {
                $order_product = array();
            }
            $order["product"] = $order_product;
        }
        else
        {
            $order = array();
        }
        $result = array("code"=>"200","msg"=>"获取订单成功","data"=>$order);
        exit(json_encode($result,JSON_UNESCAPED_UNICODE));
    }
    //确认收货
    public function Confirmation(){
    	$order_id = $_POST['order_id'];
        $member_id = $_POST['member_id'];
        if(!empty($order_id))
        {
            $order = M();
            $order->startTrans();
            //修改订单状态成待评价
            $result = M('order_form')->where("id=$id and member_id=$member_id")->setField('order_status',3);

            //修改
            $order->commit();
            
            $order->rollback();

            $result = M('order_form')->where("id=$id and member_id=$member_id")->data(array("order_status"))->setField('is_recycle',1);
            if($result!==false||$result!==0)
            {
                $result = array("code"=>"200","msg"=>"取消订单成功");
            }
            else
            {
                $result = array("code"=>"500","msg"=>"取消失败，请重新操作");
            }
            $result = array("code"=>"404","msg"=>"请选择要操作的数据");
        }
        else
        {
            $result = array("code"=>"404","msg"=>"请选择要操作的数据");
        }

        exit(json_encode($result,JSON_UNESCAPED_UNICODE));
    }
    //获取评价信息
    public function get_commentary(){
        $this->display();
    }
    //评价
    public function go_commentary(){
        
    }
    // 微信支付
    public function orderPayParams(){
        vendor('Wxpay.Api');
        vendor('Wxpay.JsApiPay');
        vendor('Wxpay.Notify');
        vendor('Wxpay.log');
        // $openId = session('openId');
        $order_id = $_POST['order_id']; //订单id
        $title = $_POST['title'];       //订单描述
        // $uid = session('business_id');
        $cookie_member = $_COOKIE["member_id"];
        if(empty($order_id)) return $result = array("code"=>"400","msg"=>"缺少order_id参数");   
        if(empty($title)) return $result = array("code"=>"400","msg"=>"缺少title参数");
        $weixin_url = "http://shop.rjsjzx.com/app.php/Order/wxNotify";   //微信回调地址
        $openId = M('member')->field('id,openid')->where("id=$cookie_member")->find();
        if(!$openId){
            return $result = array("code"=>"400","msg"=>"缺少用户信息");
        }
        // if(!$openId['openid']){
        //     // include("WinxinsqController.class.php");
        //     // $winxinsq = A('Winxinsq'); 
        //     // $openid = $winxinsq->winxinsq(); 
        //     // http://shop.rjsjzx.com/app.php/Winxinsq/winxinsq
        //     // $openid = winxinsq(); 
        //     var_dump($openid);die;
        //     if($openid != 400){
        //         $openId = $openid;
        //     }else if($openid == 400){
        //         return $result = array("code"=>"400","msg"=>"用户信息获取失败");
        //     }
        // }else{
            $openId = $openId['openid'];
            // $openId = "orasJ53izrMn60c4_WbrFt-WTUbI";
        // }
        $price = 0;  //支付总金额
        $where = "id=$order_id";
        $order = M('order_form')->field('product_price,ordernum')->where($where)->find();
        if(!empty($order)) {
            $price = $order['product_price']*100;
            $price = 0.01*100;
            $ordernum = $order['ordernum'];
        }else{
            return false;
        }
        $tools = new \JsApiPay();
        $input = new \WxPayUnifiedOrder();
        $input->SetBody("PP代购支付");
        $input->SetAttach("test");
        $input->SetOut_trade_no($ordernum);//订单号
        $input->SetTotal_fee($price);//总价
        $input->SetTime_start(date("YmdHis"));
        $input->SetTime_expire(date("YmdHis", time() + 600));
        $input->SetGoods_tag("test");
        $input->SetNotify_url($weixin_url);
        $input->SetTrade_type("JSAPI");
        $input->SetOpenid($openId);
        $order = \WxPayApi::unifiedOrder($input);
        // print_r($order);die();
        $jsApiParameters = $tools->GetJsApiParameters($order);
        $result = array("code"=>"200","msg"=>"获取成功","data"=>$jsApiParameters);
        exit(json_encode($result,JSON_UNESCAPED_UNICODE));
    }
    /**
     * 微信支付回调处理
     */
    public function wxNotify(){
        $order_id = $_POST['order_id'];
        // $order_id = $_GET['order_id'];
        $save['pay_status'] = 1;
        $save['pay_time'] = time();
        $res_order = M('order_form')->where("id=$order_id")->save($save);
        if($res_order){
            $result = array("code"=>200,"msg"=>"支付成功");
            exit(json_encode($result,JSON_UNESCAPED_UNICODE));
        }else{
            $result = array("code"=>400,"msg"=>"支付失败");
            exit(json_encode($result,JSON_UNESCAPED_UNICODE));
        }
    }

    public function add_package(){
        $member_id = $_POST['member_id'];
        //接收数据
        $package_id = $_POST['package_id'];
        if(empty($member_id)||empty($package_id))
        {
            $result = array("code"=>"404","msg"=>"参数不对");
            exit(json_encode($result,JSON_UNESCAPED_UNICODE));
        }
        $package = M('package')->where("id=$package_id")->find();
        $count = $package['count'];


        $address = M('shopping_address')->where("member_id=$member_id")->order("is_default desc")->find();
        if(empty($address))
        {
            $result = array("code"=>"400","msg"=>"请先填写个人收货地址");
            exit(json_encode($result,JSON_UNESCAPED_UNICODE));
        }
        $ordernum=date("Ymd",time()).rand(100000,999999);
        $data_order = array(
            'member_id'=>$member_id,
            'package_id'=>$package_id,
            "ordernum"=>$ordernum,
            "remark"=>"",
            "province"=>$address['province'],
            "city"=>$address['city'],
            "district"=>$address['district'],
            "address"=>$address['address'],
            "consignee"=>$address['name'],
            "phone"=>$address['phone'],
            "count"=>$package['count'],
            "product_price"=>$package['price']
        );

        

        if($count!="1")
        {
            $is_buy = M('order_package')->where("member_id=$member_id and count=$count")->find();
            if(!empty($is_buy))
            {
                $no_buy = M('order_package')->field("id")->where("member_id=$member_id and count=$count and order_status=0")->find();
                if(empty($no_buy))
                {
                    $result = array("code"=>"501","msg"=>"您已经购买过该大礼包");
                    exit(json_encode($result,JSON_UNESCAPED_UNICODE));  
                }
                else
                {
                    $data = array("order_id"=>$no_buy['id'],"ordernum"=>$ordernum['ordernum']);
                    $result = array("code"=>"200","msg"=>"您已经购买过该大礼包","data"=>$data);
                    exit(json_encode($result,JSON_UNESCAPED_UNICODE));  
                }
            }
            $data_order['is_first'] = 0;
        }
        else
        {
            $is_buy = M('order_package')->where("member_id=$member_id and count=$count and order_status<>0")->find();
            if(!empty($is_buy))
            {
                $data_order['is_first'] = 0;
            }
            else
            {
                $data_order['is_first'] = 1;
            }
        }

        $add_package = M('order_package')
            ->add($data_order);    

        if ($add_package>0) {
            $data = array("order_id"=>$add_package,"ordernum"=>$ordernum);
            $result = array("code"=>"200","msg"=>"下订单成功","data"=>$data);
            exit(json_encode($result,JSON_UNESCAPED_UNICODE));
        }
        else {
            $result = array("code"=>"500","msg"=>"下订单失败，请重新下单");
            exit(json_encode($result,JSON_UNESCAPED_UNICODE));
        }
    }

    public function add_integral(){
        $member_id = $_COOKIE['member_id'];
        $money = $_POST['money'];

        $rule = M('integral_rule')->order("id desc")->find();
        if(empty($rule))
        {
            $result = array("code"=>"500","msg"=>"配置不正确，请重新配置");
            exit(json_encode($result,JSON_UNESCAPED_UNICODE));
        }
        $exchange = $rule['exchange'];
        $integral = $money * $exchange;
        $ordernum = date("Ymd",time()).rand(100000,999999);

        $add_integral = M('order_integral')
            ->data(array(
                'member_id'=>$member_id,
                'money'=>$money,
                "ordernum"=>$ordernum,
                "integral"=>$integral,
                "create_time"=>time()
            ))
            ->add();  

        if ($add_integral>0) {
            $data = array("order_id"=>$add_integral,"ordernum"=>$ordernum);
            $result = array("code"=>"200","msg"=>"下订单成功","data"=>$data);
            exit(json_encode($result,JSON_UNESCAPED_UNICODE));
        }
        else {
            $result = array("code"=>"500","msg"=>"下订单失败，请重新下单");
            exit(json_encode($result,JSON_UNESCAPED_UNICODE));
        } 
    }
}
